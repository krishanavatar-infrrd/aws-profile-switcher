from flask import Flask, render_template, request, jsonify, flash
from aws_profile_manager.core.manager import AWSProfileManager
from aws_profile_manager.utils.logging import setup_logging
import logging

# Setup logging
setup_logging()
logger = logging.getLogger(__name__)

# Initialize AWS Profile Manager
aws_manager = AWSProfileManager()

def create_app():
    app = Flask(__name__, template_folder="../../templates")
    app.secret_key = 'your-secret-key-here'
    
    @app.route('/')
    def index():
        try:
            status = aws_manager.get_status()
            current_profile = status.get('current_profile', 'None')
            current_env = status.get('current_environment', {})
            credentials_status = aws_manager.get_credentials_status()
            environments = aws_manager.list_environments()
            return render_template('index.html', environments=environments, 
                                 current_profile=current_profile,
                                 current_env=current_env,
                                 credentials_status=credentials_status,
                                 status=status)
        except Exception as e:
            logger.error(f'Error in index: {e}')
            return render_template('index.html', environments=environments, 
                                 current_profile='None',
                                 current_env={},
                                 credentials_status={},
                                 status={})
    
    @app.route('/profiles')
    def profiles():
        try:
            profiles = aws_manager.list_profiles()
            status = aws_manager.get_status()
            return render_template('profiles.html', profiles=profiles, current_profile=status['current_profile'])
        except Exception as e:
            logger.error(f'Error in profiles: {e}')
            return render_template('profiles.html', profiles={}, current_profile=None)
    
    @app.route('/environments')
    def environments():
        try:
            environments = aws_manager.list_environments()
            status = aws_manager.get_status()
            return render_template('environments.html', 
                                 environments=environments, 
                                 current_env=status.get('current_environment', {}))
        except Exception as e:
            logger.error(f'Error in environments: {e}')
            return render_template('environments.html', environments={}, current_env=None)
    
    @app.route('/credentials')
    def credentials():
        try:
            status = aws_manager.get_status()
            credentials_status = aws_manager.get_credentials_status()
            environments = aws_manager.list_environments()
            return render_template('credentials.html', status=status, credentials_status=credentials_status)
        except Exception as e:
            logger.error(f'Error in credentials: {e}')
            return render_template('credentials.html', status={}, credentials_status={
                'base_file_exists': False,
                'default_profile_valid': False,
                'infrrd_master_valid': False,
                'in_sync': False,
                'base_access_key': 'N/A',
                'default_access_key': 'N/A',
                'infrrd_access_key': 'N/A'
            })
    
    @app.route('/s3')
    def s3():
        try:
            buckets_result = aws_manager.list_s3_buckets()
            buckets = buckets_result.get('buckets', []) if buckets_result['success'] else []
            return render_template('s3.html', buckets=buckets)
        except Exception as e:
            logger.error(f'Error in s3: {e}')
            return render_template('s3.html', buckets=[])
    
    @app.route('/assume-role-page')
    def assume_role_page():
        try:
            assume_role_configs = aws_manager.config_manager.get_assume_role_configs()
            return render_template('assume_role.html', assume_role_configs=assume_role_configs)
        except Exception as e:
            logger.error(f'Error in assume role page: {e}')
            return render_template('assume_role.html', assume_role_configs={})
    
    
    # API Endpoints
    @app.route('/api/switch_profile', methods=['POST'])
    def api_switch_profile():
        """API endpoint to switch profile"""
        try:
            data = request.get_json()
            profile_name = data.get('profile_name')
            result = aws_manager.switch_profile(profile_name)
            return jsonify(result)
        except Exception as e:
            logger.error(f"Error switching profile: {e}")
            return jsonify({'success': False, 'message': str(e)})

    @app.route('/api/switch_environment', methods=['POST'])
    def api_switch_environment():
        """API endpoint to switch environment"""
        try:
            data = request.get_json()
            env_name = data.get('env_name')
            result = aws_manager.switch_environment(env_name)
            return jsonify(result)
        except Exception as e:
            logger.error(f"Error switching environment: {e}")
            return jsonify({'success': False, 'message': str(e)})

    @app.route('/api/sync_credentials', methods=['POST'])
    def api_sync_credentials():
        """API endpoint to sync credentials"""
        try:
            result = aws_manager.sync_credentials()
            return jsonify({'success': result, 'message': 'Credentials synced successfully' if result else 'Failed to sync credentials'})
        except Exception as e:
            logger.error(f"Error syncing credentials: {e}")
            return jsonify({'success': False, 'message': str(e)})

    @app.route('/api/status', methods=['GET'])
    def api_status():
        """API endpoint to get status"""
        try:
            status = aws_manager.get_status()
            return jsonify(status)
        except Exception as e:
            logger.error(f"Error getting status: {e}")
            return jsonify({'error': str(e)})
    
    return app

def run_app(host='0.0.0.0', port=5000, debug=False):
    """Run the Flask application"""
    app = create_app()
    app.run(host=host, port=port, debug=debug)
